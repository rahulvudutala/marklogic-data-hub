/**
 Copyright (c) 2020 MarkLogic Corporation

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
'use strict';

xdmp.securityAssert("http://marklogic.com/data-hub/privileges/read-entity-model", "execute");

var docUri;

const esInstance = require('/MarkLogic/entity-services/entity-services-instance');
let isEntityInstance = false;
let doc = cts.doc(docUri);

if(!doc) {
    throw Error("Cannot find document with uri " + docUri);
}

if(doc instanceof Element || doc instanceof XMLDocument) {
    const currNode = new NodeBuilder().startDocument().addNode(doc).endDocument().toNode();
    doc = esInstance.canonicalJson(currNode).toObject();
    // Converting instance array generated by canonicalJson into an object
    if(doc.envelope && doc.envelope.instance && doc.envelope.instance.length) {
        let instanceObject = {};
        for(const obj of doc.envelope.instance) {
            instanceObject = Object.assign(instanceObject, obj);
        }
        doc.envelope.instance = instanceObject;
    }
} else {
    doc = doc.toObject();
}

if(doc instanceof Document && doc.envelope && doc.envelope.instance && doc.envelope.instance.info && doc.envelope.instance[doc.envelope.instance.info.title]) {
    const entityModels = fn.collection("http://marklogic.com/entity-services/models");
    const entityModelNames = [];
    for (const entityModel of entityModels) {
        entityModelNames.push(JSON.parse(entityModel).info.title);
    }

    const entityInstanceType = doc.envelope.instance.info.title;
    isEntityInstance = entityModelNames.includes(entityInstanceType);
}

isEntityInstance;
